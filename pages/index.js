import Head from 'next/head'
import { Inter } from '@next/font/google'
import { IconButton, Stack, Tab, Tabs, Typography,  LinearProgress,  Grid, Modal, useMediaQuery } from "@mui/material";
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import DownloadIcon from '@mui/icons-material/Download';
import React, { useEffect, useState } from "react";
import axios from 'axios'
import Link from 'next/link';
import SearchIcon from '@mui/icons-material/Search';
import CloseIcon from '@mui/icons-material/Close';
import Row from "./comp/row";
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import { catagories } from "../sources/catagories";
import FilterAltIcon from '@mui/icons-material/FilterAlt';
const inter = Inter({ subsets: ['latin'] })
  const URL = 'https://movies-0alw.onrender.com'
export default function Home() {
  const matches = useMediaQuery('(min-width:800px)');

  const [loading, setloading] = useState(true)
  const [data, setdata] = useState()
  const [cat, setcat] = useState('')
  const [filter, setfilter] = useState([])
  const [search, setsearch] = useState()
  const [searchsm, setsearchsm] = useState()
  const style = {
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: 400,
      bgcolor: 'background.paper',
      border: '2px solid #000',
      boxShadow: 24,
      p: 4,
  };
  const [openm, setOpenm] = useState(false);
  const handleOpen = () => setOpenm(true);
  const handleClose = () => setOpenm(false);
  const [openf, setOpenf] = useState(false);
  const handleOpen2 = () => setOpenf(true);
  const handleClose2 = () => setOpenf(false);
  const settings = {
      dots: true,
      infinite: true,
      slidesToShow: 1,
      slidesToScroll: 1,
      autoplay: true,
      autoplaySpeed: 5000,
      speed: 1000,
      pauseOnHover: false,
      nextArrow: <SampleNextArrow />,
      prevArrow: <SamplePrevArrow />
  };
  console.log('rerendered')
  useEffect(() => {
      window.addEventListener('load', () => { console.log("loaded") })
      const loaddata = async () => {
          const res = await axios.get(`${URL}/user/getdata`)
          if (res.data.success) {
              setdata(res.data.data)
              setTimeout(() => {
                  // console.clear()
                  }, 1000);
                  setloading(false)

          }
      }

      loaddata()
     
  }, [])
  useEffect(() => {
      setfilter(data ? data.filter(item => item.name.toLowerCase().includes(search)) : [])
  }, [search])
  useEffect(() => {
      setfilter(data ? data.filter(item => item.name.toLowerCase().includes(searchsm)) : [])
  }, [searchsm])
  function SamplePrevArrow(props) {
      const { className, style, onClick } = props;
      return (
          <div
              className={className}
              style={{ ...style, display: "none", background: "green" }}
              onClick={onClick}
          />
      );
  }
  function SampleNextArrow(props) {
      const { className, style, onClick } = props;
      return (
          <div
              className={className}
              style={{ ...style, display: "none", background: "red" }}
              onClick={onClick}
          />
      );
  }

  return (
    <>
      <Head>
        <title>E4A</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading &&
            // <CircularProgress sx={{ color: 'white', position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)' }} />
            <>
            <Stack sx={{zIndex:'100'}}>
                <LinearProgress color="error" />
                <Typography sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)', fontWeight: 'bold' }}>Please  <span style={{ color: '#e50914' }}> wait...</span> </Typography>
            </Stack>
            </>
        }
            {data && !loading &&
                <>
                    <Stack direction="row" sx={{ justifyContent: 'space-between', position: 'absolute', top: '0%', zIndex: 4, width: '100%', background: 'url(img/nav-shadow.png)' }} >
                        <Stack direction='row' sx={{ gap: '10px', alignItems: 'center', '& p': { fontWeight: 'bold' } }}>
                            <Link href="/" style={{ textDecoration: 'none', display: matches ? 'flex' : 'none' }}><Typography sx={{ fontSize: { xs: '1rem', md: '1.5rem', lg: '2rem' }, color: 'white', fontWeight: 'bold', marginRight: '20px', margin: { xs: '10px', md: '20px' }, cursor: 'pointer' }}>Entertainment<span style={{ color: '#e50914' }}>4All</span></Typography></Link>
                            <Link href="/" style={{ textDecoration: 'none', display: matches ? 'none' : 'flex' }}><Typography sx={{ fontSize: { xs: '1rem', md: '1.5rem', lg: '2rem' }, color: 'white', fontWeight: 'bold', marginRight: '20px', margin: { xs: '10px', md: '20px' }, cursor: 'pointer' }}>E<span style={{ color: '#e50914' }}>4</span>A</Typography></Link>
                            <Stack direction="row" sx={{ alignItems: 'center', position: { xs: 'absolute', md: 'relative' }, display: { xs: 'none', md: 'flex' } }}>
                                <Typography sx={{ marginRight: '10px' }}>Filter : </Typography>
                                <Stack direction="row" sx={{ alignItems: 'center', position: 'relative', justifyContent: 'space-between', border: '1px solid white', cursor: 'pointer', padding: '5px 10px', minWidth: '100px', '&:hover': { '&>div': { display: 'block' } } }} >
                                    <Typography sx={{ textAlign: 'center' }}>{cat.length > 0 ? cat : "all"}</Typography>
                                    <ArrowDropDownIcon sx={{ color: 'white' }} />
                                    <Stack sx={{ width: '300%', border: '1px solid white', background: 'rgba(0,0,0,0.5)', position: 'absolute', top: '100%', left: '0%', display: 'none' }}>
                                        <Grid container>
                                            {catagories && catagories.map((item, index) => (
                                                <Grid item xs={4} key={index}>
                                                    <Typography sx={{ padding: '10px', '&:hover': { color: '#e50914', cursor: 'pointer' } }} onClick={() => { setcat(item) }}>{item}</Typography>
                                                </Grid>
                                            ))}
                                        </Grid>
                                    </Stack>
                                </Stack>
                            </Stack>

                        </Stack>
                        <Stack direction="row" sx={{ justifyContent: 'space-between', border: '1px solid white', alignItems: 'center', borderRadius: '25px', padding: '0px 20px', width: "40%", margin: { xs: '10px', md: '20px' }, opacity: openm ? 0 : 1, display: { xs: 'none', md: 'flex' }, transform: openm && "scaleX(3) translateX(-200px)", transition: 'opacity 0.5s, transform 0.5s',cursor:'pointercd' }} onClick={handleOpen}>
                            <Typography sx={{ color: 'white' }}>Search...</Typography>
                            <SearchIcon />
                        </Stack>
                        <Stack direction="row" sx={{ display: { xs: 'flex', md: 'none' } }}>
                            <IconButton sx={{ display: { xs: 'flex', md: 'none' }, borderRadius: '25px', opacity: openm ? 0 : 1 }} onClick={handleOpen}><SearchIcon sx={{ color: 'white' }} /></IconButton>
                            <IconButton sx={{ display: { xs: 'flex', md: 'none' }, borderRadius: '25px', opacity: openm ? 0 : 1 }} onClick={handleOpen2}><FilterAltIcon sx={{ color: 'white' }} /></IconButton>
                        </Stack>
                    </Stack>

                    <Stack>

                        <Stack sx={{ position: 'relative', minHeight: { xs: '40vh', md: '100vh' }, background: 'url(img/bg3.jpg)', backgroundSize: 'cover', backgroundPosition: 'top' }}>
                            <Stack sx={{ color: 'white', position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)', background: 'rgba(0,0,0,0.2)', width: '100%', height: '100%' }}> <Typography sx={{ color: 'white', position: 'absolute', top: { xs: '50%', md: '20%' }, left: '50%', transform: 'translate(-50%,-50%)', fontSize: { xs: '1rem', md: '1.5rem', lg: '2rem' }, color: 'white', fontWeight: 'bold', textAlign: 'center',whiteSpace:'nowrap' }}> Watch online<span style={{ color: '#e50914' }}>  &  </span> download</Typography></Stack>
                        </Stack>
                        <Stack sx={{ position: { xs: 'relative', md: 'absolute' }, bottom: '0%', maxWidth: '100%', margin: { xs: '0px 5px', md: '0px 0px' } }}>
                            <Row data={data.filter(item => item.genera.includes('latest') && item.genera.includes(cat))} title="Latest" />
                        </Stack>
                    </Stack>
                    <Stack sx={{ margin: { xs: '0px 5px', md: '0px 0px' } }}>
                        <Row data={data.filter(item => item.type == 'movie' && item.genera.includes(cat))} title="Movies" />
                        <Row data={data.filter(item => item.type == 'series' && item.genera.includes(cat))} title="Series" />
                        <Row data={data.filter(item => item.genera.includes('cartoon') && item.genera.includes(cat))} title="Cartoon" />
                        <Row data={data.filter(item => item.genera.includes('anime') && item.genera.includes(cat))} title="Anime" />
                    </Stack>
                    <Modal
                        open={openm}
                        onClose={handleClose}
                        aria-labelledby="modal-modal-title"
                        aria-describedby="modal-modal-description"
                    >
                        <Stack sx={{ minWidth: '100vw', minHeight: '100vh', background: 'rgba(0,0,0,0.8)' }}>
                            <Stack direction="row" sx={{ border: '1px solid white', alignItems: 'center', borderRadius: '25px', width: "95%", marginBottom: '16px', margin: { md: '50px auto', xs: '20px auto' }, opacity: openm ? 1 : 0, transition: 'opacity 05s' }}>
                                <input type="text" style={{ marginLeft: '10px', background: 'none', border: 'none', outline: 'none', padding: '10px 5px', color: 'white', width: '100%' }} placeholder="Search" value={searchsm} onChange={e => setsearchsm(e.target.value)} />
                                <CloseIcon sx={{ color: 'white', marginRight: '10px', cursor: 'pointer' }} onClick={handleClose} />
                            </Stack>
                            {searchsm &&
                                filter.length > 0 &&
                                <>
                                    <Grid container sx={{ width: '95%', margin: '0px auto' }} spacing={1}>
                                        {filter.map((item, index) => (
                                          <>
                                            <Link href = {{pathname:'/video', query: item }} style={{color:'white'}}><Stack sx={{ position: 'relative', borderRadius: '5px', margin: '5px', width: { xs: '20vw', sm: '22vw', md: '20vw', lg: '14vw', '&:hover': { '&>img': { transform: 'scale(1.25)' }, '&>div': { opacity: '1' } } }, overflow: 'hidden' }} key={index} >
                                                <img src={item.image} alt="" style={{ borderRadius: '5px', transition: 'transform 0.5s' }} />
                                                <Stack sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%,-50%)', background: "rgba(0,0,0,0.6)", width: '101%', height: '101%', borderRadius: '5px', justifyContent: 'space-between', alignItems: 'center', opacity: '0', transition: 'opacity 0.25s', display: { xs: 'none', md: 'flex' }, cursor: 'pointer' }} >
                                                    <Typography sx={{ whiteSpace: 'break-spaces', padding: '5px', fontSize: { xs: '0.75rem', md: '1rem' } }}>{item.name}</Typography>
                                                    <Stack direction="row" sx={{ justifyContent: 'space-between', alignItems: 'center', padding: '5px', minWidth: '95%' }}>
                                                        <Stack direction="row" sx={{ gap: '10px', justifyContent: 'center', width: '100%' }}>
                                                            <IconButton sx={{ border: '1px solid gray', borderRadius: '25px' }} ><PlayArrowIcon sx={{ color: 'white', fontSize: { xs: '14px', md: '1rem' } }} /> </IconButton>
                                                            <IconButton sx={{ border: '1px solid gray', borderRadius: '25px' }} ><DownloadIcon sx={{ color: 'white', fontSize: { xs: '14px', md: '1rem' } }} /> </IconButton>
                                                        </Stack>
                                                    </Stack>
                                                </Stack>
                                            </Stack>
                                            </Link>
                                            </>
                                        ))}
                                    </Grid>
                                </>
                            }
                            {searchsm && filter.length === 0 && <Typography sx={{ textAlign: 'center', color: 'white' }}>No results found</Typography>}


                        </Stack>

                    </Modal>
                    <Modal
                        open={openf}
                        onClose={handleClose2}
                        aria-labelledby="modal-modal-title"
                        aria-describedby="modal-modal-description"
                    >
                        <Stack sx={{ minWidth: '100vw', minHeight: '100vh', color: 'white', background: 'rgba(0,0,0,0.8)' }}>
                            <Grid container sx={{ margin: '30px 0px' }}>
                                {catagories && catagories.map((item, index) => (
                                    <Grid item xs={12} key={index}>
                                        <Typography sx={{ padding: '10px', textAlign: 'center', fontWeight: 'bold', '&:hover': { color: '#e50914', cursor: 'pointer' } }} onClick={() => { setcat(item) }}>{item}</Typography>
                                    </Grid>
                                ))}
                            </Grid>
                            <IconButton sx={{ display: { xs: 'flex', md: 'none' }, position: "absolute", bottom: '5%', left: '50%', transform: 'translateX(-50%)', borderRadius: '25px', opacity: openm ? 0 : 1 }} onClick={handleClose2}><CloseIcon sx={{ color: 'white' }} /></IconButton>
                        </Stack>
                    </Modal>
                </>
            }

    </>
  )
}
